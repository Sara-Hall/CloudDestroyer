/*
 * Gameplay for my game
 * This was my biggest class, so it had the most bugs.
 * Scroll to see what the bugs were and how I fixed them.
 */
package BrickGame;

/**
 *
 * @author sara
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.swing.JPanel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Timer;

public class Game extends JPanel implements KeyListener, ActionListener {
    // initialize variables
    private boolean play = false;
    private final Timer timer;
    private final int delay = 10;
    private int paddleX;
    private int ballX;
    private int ballY;
    private int Horizontal;
    private int Vertical;
    private Clouds clouds;
    private int totalClouds = 20;
    private int Health = 3;
    private int mainMenu = 1;
    
    public Game() {
        clouds = new Clouds(5,4);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        // I've never used a timer before, so I had to do some research first to understand how it works.
        timer = new Timer(delay,this);
        timer.start();
    }
    
    //graphics
    public void paint(Graphics g) {
    
        // draw background
        // This was my first time using graphics in Java, so I also did some reseach to figure it out.
        g.setColor(Color.cyan);
        g.fillRect(1,1,600,700);      
        
        // draw clouds
        clouds.draw((Graphics2D)g);
        
        // draw paddle
        g.setColor(Color.blue);
        g.fillRect(paddleX,600,80,15);
        
        // draw ball
        g.setColor(Color.magenta);
        g.fillOval(ballX,ballY,20,20);   
        
        // fonts
        Font font = new Font ("Arial", 1, 22);
        Font font2 = new Font ("Arial", 1, 32);
        
        // draw health
        g.setColor(Color.black);
        g.setFont(font);
        // I had an error when I ran this because health is an integer, so I had to convert it to a string
        g.drawString("Lives: " + String.valueOf(Health), 20, 28);
        
        //draw main menu
        // I had a hard time figuring out how to get the main menu screen to show up at the start of the game.
        // I added a condition where it would only display the main menu before the user pressed the enter key.
        if (mainMenu == 1) {
            // draw background
            g.setColor(Color.cyan);
            g.fillRect(1,1,600,700); 
            // draw clouds on the background
            g.setColor(Color.white);
            for(int i=0; i < 5; i++) {
                for(int j=0; j < 4; j++) {
                    g.fillOval(j * 130 + 40, i * 120 + 50, 120, 50);
                }
            }
            g.setColor(Color.blue);
            g.setFont(font2);
            // game title
            g.drawString("CLOUD DESTROYER", 135, 270);
            g.setColor(Color.black);
            g.setFont(font);
            // instructions
            g.drawString("Use the arrow keys to move the platform under the ball", 20, 370);
            g.drawString("Try to get rid of all the clouds!", 145, 400);
            g.drawString("Press enter to start", 195, 490);
        }
        
        // draw winner
        if (totalClouds == 0) {
            play = false;
            // Before I stopped the timer, there was a bug where you could keep moving the paddle at the end of the game.
            timer.stop();
            g.setColor(Color.black);
            g.setFont(font2);
            g.drawString ("WINNER", 215, 320);
            g.setFont(font);
            g.drawString ("Press enter to play again", 160, 360);

        // draw game over
        } else if (Health == 0) {
            play = false;
            timer.stop();
            g.setColor(Color.black);
            g.setFont(font2);
            g.drawString("GAME OVER", 190, 320);
            g.setFont(font);
            g.drawString ("Press enter to play again", 160, 360);
        }
        
        g.dispose();
    }
    

    @Override
    public void keyTyped(KeyEvent ke) {
        // don't need this
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        mainMenu = 0;
        if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {
            // if paddle is all the way to the right, stop it from moving
            if (paddleX >= 515) {
                // To figure out these values, I had to use trial and error
                paddleX = 515;
            } else {
                // move the paddle right when the right arrow key is pressed
                play = true;
                paddleX = paddleX + 30;
            }
        }
        if (ke.getKeyCode() == KeyEvent.VK_LEFT) {
            // if paddle is all the way to the left, stop it from moving
            if (paddleX <= 0) {
                paddleX = 0;
            } else {
                // move the paddle left when the left arrow key is pressed
                play = true;
                paddleX = paddleX - 30;
            }
        }
        // start new game
        if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
            // It was difficult to figure out what needed to be initialized at the start of the game in order to begin a new game.
            if (!play) {
                // initialize values
                play = true;
                ballX = 450;
                ballY = 300;
                // I was able to make the game more difficult by changing these values
                Horizontal = -2;
                Vertical = -4;
                paddleX = 270;
                Health = 3;
                totalClouds = 20;
                clouds = new Clouds(5,4);
                timer.start();
                repaint();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        // don't need this
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        timer.start();
        if (play) {
            // when ball intersects with the top of the paddle
            if(new Rectangle(ballX,ballY,20,20).intersects(new Rectangle(paddleX,600,80,15))) {
                // change vertical direction
                Vertical = -Vertical;
            }

            L: for(int i = 0; i < clouds.clouds.length; i++) {
                for(int j = 0; j < clouds.clouds[0].length; j++) {
                    if(clouds.clouds[i][j] > 0) {
                        int cloudX = j * clouds.cloudLength + 50;
                        int cloudY = i * clouds.cloudHeight + 30;
                        int cloudWidth = clouds.cloudLength;
                        int cloudHeight = clouds.cloudHeight;
                        
                        Rectangle rect = new Rectangle(cloudX,cloudY,cloudWidth,cloudHeight);
                        Rectangle ballSpace = new Rectangle(ballX,ballY,20,20);
                        Rectangle cloudSpace = rect;
                        
                        // when ball intersects with a cloud
                        if(ballSpace.intersects(cloudSpace)) {
                            // set cloud value to 0 so that it won't be drawn again
                            clouds.cloudValue(0, i, j);
                            totalClouds--;
                            
                            // if it hit the side of the cloud
                            if(ballX + 19 <= cloudSpace.x || ballX + 1 >= cloudSpace.x + cloudSpace.width) {
                                // change horizontal direction
                                Horizontal = -Horizontal;
                            // if it hit the top or bottom of the cloud
                            } else {
                                // change vertical direction
                                Vertical = -Vertical;
                            }
                            // I found this way of getting out of a loop online
                            break L;
                        }
                    }
                }
            }
            // keep the ball moving in the right horizontal and vertical directions           
            ballX = ballX + Horizontal;
            ballY = ballY + Vertical;
            // when it hits the left side of the screen
            if(ballX < 0) {
                // change horizontal direction
                Horizontal = -Horizontal;
            // when it hits the top of the screen
            } else if (ballY < 0) {
                // change vertical direction
                Vertical = -Vertical;
            // when it hits the right side of the screen
            } else if(ballX > 570) {
                // change horizontal direction
                Horizontal = -Horizontal;
            // when it hits the bottom of the screen
            } else if(ballY >= 650) {
                // change vertical direction
                Vertical = -Vertical;
                // take away a life
                Health--;
            }
        }
        repaint();
    }
}
